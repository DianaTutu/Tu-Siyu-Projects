/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.ServicePackage.Immune;
import Business.PersonPackage.Student;
import Business.PersonPackage.StudentDirectory;
import Business.StartBusiness;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JPanel;

/**
 *
 * @author sdzh4
 */
public class OptionPanel extends javax.swing.JPanel {

    /**
     * Creates new form OptionPanel
     */
    private StartBusiness start;
    private JPanel CardPanel;
    private ArrayList<String> VaccineList;
    //private StudentDirectory studentDir;
    private Date now;

    OptionPanel(JPanel CardPanel, ArrayList<String> VaccineList, StartBusiness start,Date now) {
        initComponents();
        this.CardPanel = CardPanel;
        this.start = start;
        this.VaccineList = VaccineList;
        //this.studentDir = studentDir;
        this.now = now;
        for(String s:VaccineList)
        {
            combType.addItem(s);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        combType = new javax.swing.JComboBox<>();
        combThreshold = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnNext = new javax.swing.JButton();

        combType.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        combType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Disable" }));

        combThreshold.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        combThreshold.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Disable", "7", "14", "30" }));
        combThreshold.setToolTipText("");

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel1.setText("Type");

        jLabel2.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        jLabel2.setText("Threshold");

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 24)); // NOI18N
        jLabel3.setText("Option");

        btnNext.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        btnNext.setText("Next");
        btnNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(62, 62, 62)
                .addComponent(jLabel3)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(139, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(176, 176, 176)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(combType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(326, 326, 326))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnNext)
                        .addGap(241, 241, 241))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel3)
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(120, 120, 120)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(combThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 153, Short.MAX_VALUE)
                .addComponent(btnNext)
                .addGap(104, 104, 104))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextActionPerformed
        // TODO add your handling code here:
        if(combType.getSelectedIndex()==0)
        {
            ArrayList<Student> stulist = new  ArrayList<Student> ();
            stulist = getStu_nontype(combThreshold.getSelectedIndex(),combThreshold.getSelectedItem());
            AlertPanel panel = new AlertPanel(CardPanel,stulist,now);
            CardPanel.add("AlertPanel", panel);
            CardLayout layout = (CardLayout) CardPanel.getLayout();
            layout.next(CardPanel);
        }
        else
        {
            String type = String.valueOf(combType.getSelectedItem());
            ArrayList<Student> stulist = new  ArrayList<Student> ();
            stulist = getStu_type(type,combThreshold.getSelectedIndex(),combThreshold.getSelectedItem());   
            AlertPanel panel = new AlertPanel(CardPanel,type,stulist,now);
            CardPanel.add("AlertPanel", panel);
            CardLayout layout = (CardLayout) CardPanel.getLayout();
            layout.next(CardPanel);
        }
    }//GEN-LAST:event_btnNextActionPerformed
    public ArrayList<Student> getStu_type(String type,int index,Object item)
    {
        ArrayList<Student> Stu = new ArrayList<Student>();
        for(Student s:start.getStudentDirectory().getStuDir())
        {
            if(s.getImuDir().getSpecifiedType(type)!=null)
            {
                Immune imm = s.getImuDir().getSpecifiedType(type);
                 int  threshold = index2threshold(index,item);
                if(timethreshold(imm,threshold))
                {
                    Stu.add(s);
                }
            }
        }
        return Stu;
            
    }
    public ArrayList<Student> getStu_nontype(int index,Object item)
    {
        ArrayList<Student> Stu = new ArrayList<Student>();
        for(Student s:start.getStudentDirectory().getStuDir())
        {
            int n = 0;
            for(Immune imm:s.getImuDir().getImmuDir())
            {       
                imm.setFlag(0);
                int  threshold = index2threshold(index,item);
                if(timethreshold(imm,threshold))
                {
                    imm.setFlag(1);
                    n=1;
                }
            }
            
            if(n==1)
            {
                Stu.add(s);
            }
        }
        return Stu;
    }
    public int index2threshold(int index,Object item)
    {
        if(index==0)
        {
            return 0;
        }
        else
        {
            return Integer.parseInt(item.toString());
        }
    }
    public boolean timethreshold(Immune imm,int threshold)
    {
        if(threshold==0)
        {
            return true;
        }
        else
        {
            Date immdate =imm.getInoculationCalendar().get(0);
            return imm.Alert(now, immdate, threshold);
        }
    }
    
        

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNext;
    private javax.swing.JComboBox<String> combThreshold;
    private javax.swing.JComboBox<String> combType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    // End of variables declaration//GEN-END:variables
}
