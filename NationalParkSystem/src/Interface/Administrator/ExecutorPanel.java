/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface.Administrator;

import Business.Enterprise.Enterprise;
import Business.Person.Person;
import Business.Species.AnimalSpecies;
import Business.Species.PlantSpecies;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AnimalReportRequest;
import Business.WorkQueue.PlantReportRequest;
import Business.WorkQueue.ProjectWorkRequest;
import Business.WorkQueue.ReservationWorkRequest;
import Business.project.Project;
import Business.Report.AnimalReport;
import Business.Report.PlantReport;
import Business.Report.ReportDirectory;
import Business.WorkQueue.EmergencyRequest;
import Interface.Employee.Botanist.WritePlantReportJPanel;
import java.awt.CardLayout;
import java.awt.Component;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tusiyu
 */
public class ExecutorPanel extends javax.swing.JPanel {

    /**
     * Creates new form ExecutorPanel
     */
    public JPanel CardPanel;
    public Enterprise enterprise;
    private UserAccount account;
    private ReportDirectory reports;

    public ExecutorPanel(JPanel CardPanel, Enterprise enterprise, UserAccount account) {
        initComponents();
        this.setBackground(null);
        this.setOpaque(false);
        this.CardPanel = CardPanel;
        this.enterprise = enterprise;
        this.account = account;

        populateReservation();
        populateAnimal();
        populatePlant();
        populateProject();
        populateAnimalReport();
        populatePlantReport();
        populateAnimalsInDangerTable();
        populatePlantsInDangerTable();
        populateEmergency();

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        if (enterprise.getWorkQueue().getClimateReportRequests().size() != 0) {
            if (sdf.format(enterprise.getWorkQueue().getClimateReportRequests().get(0).getReport().getDate()) != sdf.format(new Date())) {

                max.setText(String.valueOf(enterprise.getWorkQueue().getClimateReportRequests().get(0).getReport().getMax_t()));
                min.setText(String.valueOf(enterprise.getWorkQueue().getClimateReportRequests().get(0).getReport().getMin_t()));
                h.setText(String.valueOf(enterprise.getWorkQueue().getClimateReportRequests().get(0).getReport().getHumidity()));
            }
        }

        max.setEditable(false);
        min.setEditable(false);
        h.setEditable(false);
        this.setOpaque(false);
        SpeciesPanel.setOpaque(false);
        AbnormalPanel.setOpaque(false);
        Report.setOpaque(false);
        jPanel1.setOpaque(false);
        jPanel2.setOpaque(false);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        SpeciesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        plants = new javax.swing.JTable();
        viewAnimalBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        deleteAnimalSpeciesBtn = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        animals = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        viewPlantBtn = new javax.swing.JButton();
        deletePlantSpeciesBtn = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        AbnormalPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        animalInDangerTable = new javax.swing.JTable();
        alertBtn = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        plantInDangerTable = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        humidityLabel = new javax.swing.JLabel();
        highestLabel = new javax.swing.JLabel();
        min = new javax.swing.JTextField();
        max = new javax.swing.JTextField();
        h = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane10 = new javax.swing.JScrollPane();
        em = new javax.swing.JTable();
        jLabel8 = new javax.swing.JLabel();
        Report = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        report1 = new javax.swing.JTable();
        jButton7 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        viewReportBtn = new javax.swing.JButton();
        resetAllBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        report2 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        viewReportBtn1 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        resetAllPlantBtn = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        reservation = new javax.swing.JTable();
        Approve = new javax.swing.JButton();
        Decline = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        project = new javax.swing.JTable();
        Assign = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        plants.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        plants.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Quantity", "Genus", "Min_temp", "Max_temp"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(plants);
        if (plants.getColumnModel().getColumnCount() > 0) {
            plants.getColumnModel().getColumn(0).setResizable(false);
            plants.getColumnModel().getColumn(0).setPreferredWidth(20);
        }

        viewAnimalBtn.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        viewAnimalBtn.setText("View");
        viewAnimalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAnimalBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        jLabel1.setText("Animals");

        deleteAnimalSpeciesBtn.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        deleteAnimalSpeciesBtn.setText("Delete");
        deleteAnimalSpeciesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAnimalSpeciesBtnActionPerformed(evt);
            }
        });

        animals.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        animals.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Quantity", "Genus", "Min_BP", "Max_Bp", "Min_temp", "Max_temp", "Min_w", "Max_w", "Min_h", "Max_h"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        animals.setRowHeight(20);
        animals.setRowMargin(2);
        animals.getTableHeader().setReorderingAllowed(false);
        jScrollPane6.setViewportView(animals);

        jLabel2.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        jLabel2.setText("Plants");

        viewPlantBtn.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        viewPlantBtn.setText("View");
        viewPlantBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewPlantBtnActionPerformed(evt);
            }
        });

        deletePlantSpeciesBtn.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        deletePlantSpeciesBtn.setText("Delete");
        deletePlantSpeciesBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deletePlantSpeciesBtnActionPerformed(evt);
            }
        });

        jButton15.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        jButton15.setText("Back");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton15ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout SpeciesPanelLayout = new javax.swing.GroupLayout(SpeciesPanel);
        SpeciesPanel.setLayout(SpeciesPanelLayout);
        SpeciesPanelLayout.setHorizontalGroup(
            SpeciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SpeciesPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(SpeciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(SpeciesPanelLayout.createSequentialGroup()
                        .addGroup(SpeciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 635, Short.MAX_VALUE)
                            .addComponent(jScrollPane6))
                        .addGap(26, 26, 26)
                        .addGroup(SpeciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(SpeciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(viewAnimalBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(deleteAnimalSpeciesBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(deletePlantSpeciesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewPlantBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(92, Short.MAX_VALUE))
        );
        SpeciesPanelLayout.setVerticalGroup(
            SpeciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(SpeciesPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addGroup(SpeciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(SpeciesPanelLayout.createSequentialGroup()
                        .addComponent(viewAnimalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(deleteAnimalSpeciesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(35, 35, 35)
                .addComponent(jLabel2)
                .addGap(20, 20, 20)
                .addGroup(SpeciesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(SpeciesPanelLayout.createSequentialGroup()
                        .addComponent(viewPlantBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(deletePlantSpeciesBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jButton15, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        jTabbedPane1.addTab("Species Management", SpeciesPanel);

        animalInDangerTable.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        animalInDangerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Animal", "Status"
            }
        ));
        animalInDangerTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(animalInDangerTable);

        alertBtn.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        alertBtn.setText("Alert Field Team");
        alertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alertBtnActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        jButton9.setText("Back");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        plantInDangerTable.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        plantInDangerTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Plant", "Status"
            }
        ));
        jScrollPane8.setViewportView(plantInDangerTable);

        jLabel5.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        jLabel5.setText("Unhealthy Animal:");

        jLabel6.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        jLabel6.setText("Unhealthty Plant:");

        humidityLabel.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        humidityLabel.setText("Humidity:");

        highestLabel.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        highestLabel.setText("Temperature:");

        jLabel7.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        jLabel7.setText("Emergency");

        em.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Sender", "Location", "Emergency Type", "Status"
            }
        ));
        jScrollPane10.setViewportView(em);

        jLabel8.setText("-");

        javax.swing.GroupLayout AbnormalPanelLayout = new javax.swing.GroupLayout(AbnormalPanel);
        AbnormalPanel.setLayout(AbnormalPanelLayout);
        AbnormalPanelLayout.setHorizontalGroup(
            AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AbnormalPanelLayout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, AbnormalPanelLayout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addGap(661, 661, 661))
                        .addGroup(AbnormalPanelLayout.createSequentialGroup()
                            .addGap(231, 231, 231)
                            .addGroup(AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(highestLabel)
                                .addComponent(humidityLabel))
                            .addGap(26, 26, 26)
                            .addGroup(AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(h, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(AbnormalPanelLayout.createSequentialGroup()
                                    .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(max, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addContainerGap()))
                    .addGroup(AbnormalPanelLayout.createSequentialGroup()
                        .addGroup(AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addGroup(AbnormalPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 501, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(alertBtn)))
                        .addGap(168, 168, 168))))
        );
        AbnormalPanelLayout.setVerticalGroup(
            AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AbnormalPanelLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(highestLabel)
                    .addComponent(min, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(max, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(15, 15, 15)
                .addGroup(AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(humidityLabel)
                    .addComponent(h, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addComponent(jLabel5)
                .addGap(10, 10, 10)
                .addGroup(AbnormalPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jLabel6)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Abnormal Management", AbnormalPanel);

        report1.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        report1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Report Status", "Vet"
            }
        ));
        report1.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(report1);

        jButton7.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        jButton7.setText("Check");
        jButton7.setToolTipText("Assign a vet to check and write report");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        jLabel3.setText("Animals");

        viewReportBtn.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        viewReportBtn.setText("View");
        viewReportBtn.setToolTipText("Click to view report");
        viewReportBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewReportBtnActionPerformed(evt);
            }
        });

        resetAllBtn.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        resetAllBtn.setText("Reset All");
        resetAllBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllBtnActionPerformed(evt);
            }
        });

        report2.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        report2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "ReportStatus", "Botanist"
            }
        ));
        jScrollPane4.setViewportView(report2);

        jLabel4.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        jLabel4.setText("Plants");

        viewReportBtn1.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        viewReportBtn1.setText("View");
        viewReportBtn1.setToolTipText("Click to view report");
        viewReportBtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewReportBtn1ActionPerformed(evt);
            }
        });

        jButton8.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        jButton8.setText("Check");
        jButton8.setToolTipText("Assign a vet to check and write report");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        resetAllPlantBtn.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        resetAllPlantBtn.setText("Reset All");
        resetAllPlantBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetAllPlantBtnActionPerformed(evt);
            }
        });

        jButton16.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        jButton16.setText("Back");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton16ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ReportLayout = new javax.swing.GroupLayout(Report);
        Report.setLayout(ReportLayout);
        ReportLayout.setHorizontalGroup(
            ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReportLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetAllPlantBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(ReportLayout.createSequentialGroup()
                        .addGroup(ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(viewReportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(viewReportBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(112, 112, 112))
        );
        ReportLayout.setVerticalGroup(
            ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ReportLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(ReportLayout.createSequentialGroup()
                        .addComponent(viewReportBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(resetAllBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(ReportLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(ReportLayout.createSequentialGroup()
                        .addComponent(viewReportBtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(resetAllPlantBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton16, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Report Management", Report);

        reservation.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        reservation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Username", "Date", "People", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        reservation.getTableHeader().setReorderingAllowed(false);
        jScrollPane7.setViewportView(reservation);

        Approve.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        Approve.setText("Approve");
        Approve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApproveActionPerformed(evt);
            }
        });

        Decline.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        Decline.setText("Decline");
        Decline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeclineActionPerformed(evt);
            }
        });

        jButton17.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        jButton17.setText("Back");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        jLabel9.setText("Tour Reservation:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(175, 175, 175)
                        .addComponent(Approve, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(Decline, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(90, 90, 90))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Approve, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Decline, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Reservation Management", jPanel1);

        project.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        project.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Project Name", "Project ID", "Member Number ", "Researcher", "Status", "Description"
            }
        ));
        project.getTableHeader().setReorderingAllowed(false);
        jScrollPane5.setViewportView(project);

        Assign.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        Assign.setText("Assign");
        Assign.setToolTipText("Assign the selected project to an employee");
        Assign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignActionPerformed(evt);
            }
        });

        jButton18.setFont(new java.awt.Font("Al Bayan", 1, 15)); // NOI18N
        jButton18.setText("Back");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Lucida Bright", 2, 18)); // NOI18N
        jLabel10.setText("Research Projects:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(330, 330, 330)
                            .addComponent(Assign, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(282, 282, 282))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Assign, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton18, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(287, 287, 287))
        );

        jTabbedPane1.addTab("ManageProject", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 747, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // TODO add your handling code here:
        CardPanel.remove(this);
        CardLayout layout = (CardLayout) CardPanel.getLayout();
        layout.previous(CardPanel);

    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton15ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
        // TODO add your handling code here:
        // CardPanel.remove(this);
        //CardLayout layout = (CardLayout) CardPanel.getLayout();
        //layout.previous(CardPanel);
        CardPanel.remove(this);
        CardLayout layout = (CardLayout) CardPanel.getLayout();
        layout.previous(CardPanel);
    }//GEN-LAST:event_jButton15ActionPerformed

    private void ApproveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApproveActionPerformed
        // TODO add your handling code here:

        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        int selectedRow = reservation.getSelectedRow();
        if (selectedRow >= 0) {
            ReservationWorkRequest a = (ReservationWorkRequest) reservation.getValueAt(selectedRow, 0);
            if (!a.getStatus().equalsIgnoreCase("Under Review")) {
                JOptionPane.showMessageDialog(null, "This one has been processed!");
                return;
            }
            Date d = a.getRequestDate();
            // Validation: cannot approve if people exceeds 200 for one day
            int people = 0;
            for (ReservationWorkRequest rr : enterprise.getOrganizationDirectory().getOrganizationList().get(0).getWorkQueue().getReservationWorkRequests()) {
                if ((sdf.format(rr.getRequestDate()).equalsIgnoreCase(sdf.format(d)) || sdf.format(rr.getRequestDate()) == sdf.format(d)) && (rr.getStatus() == "Approved" || rr.getStatus().equalsIgnoreCase("approved"))) {

                    people = people + Integer.parseInt(rr.getMessage());
                }
            }

            if (people + Integer.parseInt(a.getMessage()) > 200) {
                JOptionPane.showMessageDialog(null, "Exceeds maximum capacity!");
                return;
            }
            // Validation ends.

            for (ReservationWorkRequest u : enterprise.getOrganizationDirectory().getOrganizationList().get(0).getWorkQueue().getReservationWorkRequests()) {
                if (u == a) {
                    u.setStatus("Approved");
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        populateReservation();

    }//GEN-LAST:event_ApproveActionPerformed

    private void DeclineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeclineActionPerformed
        // TODO add your handling code here:
        int selectedRow = reservation.getSelectedRow();
        if (selectedRow >= 0) {
            ReservationWorkRequest a = (ReservationWorkRequest) reservation.getValueAt(selectedRow, 0);
            if (!a.getStatus().equalsIgnoreCase("Under Review")) {
                JOptionPane.showMessageDialog(null, "This one has been processed");
            } else {
                for (ReservationWorkRequest u : enterprise.getOrganizationDirectory().getOrganizationList().get(0).getWorkQueue().getReservationWorkRequests()) {
                    if (u == a) {
                        u.setStatus("Declined");
                    }
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
            return;
        }
        populateReservation();

    }//GEN-LAST:event_DeclineActionPerformed

    private void AssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = project.getSelectedRow();

        if (selectedRow >= 0) {

            Project a = (Project) project.getValueAt(selectedRow, 0);
            System.out.print(a.getResearcher());
            if (a.getResearcher() != "") {
                JOptionPane.showMessageDialog(null, "The projet is assigned!");
            } else {
                JComboBox<Person> combo = new JComboBox<>();
                List<Person> vetList = new ArrayList<>();

                for (UserAccount u : enterprise.getOrganizationDirectory().getOrganizationList().get(1).getUserAccountDirectory().getUserAccountList()) {
                    String tag = u.getPerson().getTag();
//            System.out.println(tag);
                    if (tag.equalsIgnoreCase("Vet")) {
                        vetList.add(u.getPerson());
                    }
                }

                for (Person p : vetList) {
                    combo.addItem(p);
                }

                JOptionPane.showMessageDialog(null, combo, "Select a vet", JOptionPane.QUESTION_MESSAGE);
                Person item = (Person) combo.getSelectedItem();
                for (UserAccount u : enterprise.getOrganizationDirectory().getOrganizationList().get(1).getUserAccountDirectory().getUserAccountList()) {
                    if (u.getPerson() == item) {
                        ProjectWorkRequest pw = new ProjectWorkRequest();
                        pw.setReceiver(u);
                        pw.setProject(a);
                        pw.setStatus("pending");
                        a.setResearcher(u.getPerson().getName());
                        a.setStatus("Assigned");
                        u.getWorkQueue().getProjectRequestList().add(pw);
                        enterprise.getWorkQueue().getProjectRequestList().add(pw);

                    }
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
        populateProject();

    }//GEN-LAST:event_AssignActionPerformed

    private void viewAnimalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAnimalBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = animals.getSelectedRow();
        if (selectedRow >= 0) {
            AnimalSpecies a = (AnimalSpecies) animals.getValueAt(selectedRow, 0);
            AnimalPanel panel = new AnimalPanel(CardPanel, a, enterprise, account);
            panel.setBackground(null);
            panel.setOpaque(false);
            CardPanel.add("AnimalPanel", panel);
            CardLayout layout = (CardLayout) CardPanel.getLayout();
            layout.next(CardPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
    }//GEN-LAST:event_viewAnimalBtnActionPerformed

    private void viewPlantBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewPlantBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = plants.getSelectedRow();
        if (selectedRow >= 0) {
            PlantSpecies a = (PlantSpecies) plants.getValueAt(selectedRow, 0);
            PlantPanel panel = new PlantPanel(CardPanel, a, enterprise);
            panel.setBackground(null);
            panel.setOpaque(false);
            CardPanel.add("PlantPanel", panel);
            CardLayout layout = (CardLayout) CardPanel.getLayout();
            layout.next(CardPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
    }//GEN-LAST:event_viewPlantBtnActionPerformed

    private void resetAllPlantBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllPlantBtnActionPerformed
        // TODO add your handling code here:
        reports = new ReportDirectory();
        reports.ReportList1(enterprise.getPlantDirectory());

        for (UserAccount ua : enterprise.getOrganizationDirectory().getOrganizationList().get(1).getUserAccountDirectory().getUserAccountList()) {
            while (ua.getWorkQueue().getPlantReportRequestList().size() != 0) {
                ua.getWorkQueue().getPlantReportRequestList().remove(0);
            }
        }

        while (enterprise.getWorkQueue().getPlantReportRequestList().size() != 0) {
            enterprise.getWorkQueue().getPlantReportRequestList().remove(0);
        }
        enterprise.setReportDirectory(reports);

        populatePlantReport();
    }//GEN-LAST:event_resetAllPlantBtnActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        int selectedRow = report2.getSelectedRow();
        if (selectedRow >= 0) {
            PlantReport a = (PlantReport) report2.getValueAt(selectedRow, 0);
            if (!a.getStatus().equalsIgnoreCase("Unchecked")) {
                JOptionPane.showMessageDialog(null, "This one is checked");
            } else {
                JComboBox<Person> combo = new JComboBox<>();
                List<Person> bList = new ArrayList<>();
                for (UserAccount u : enterprise.getOrganizationDirectory().getOrganizationList().get(1).getUserAccountDirectory().getUserAccountList()) {
                    String tag = u.getPerson().getTag();
                    //            System.out.println(tag);
                    if (tag.equalsIgnoreCase("Botanist")) {
                        bList.add(u.getPerson());
                    }
                }

                for (Person p : bList) {
                    combo.addItem(p);
                }

                JOptionPane.showMessageDialog(null, combo, "Select a Botanist", JOptionPane.QUESTION_MESSAGE);
                Person item = (Person) combo.getSelectedItem();
                for (UserAccount u : enterprise.getOrganizationDirectory().getOrganizationList().get(1).getUserAccountDirectory().getUserAccountList()) {
                    if (u.getPerson() == item) {
                        PlantReportRequest pw = new PlantReportRequest();
                        a.setStatus("Checking");
                        a.setResearcher(u.getPerson().getName());
                        pw.setReport(a);
                        pw.setMessage(a.getName());
                        u.getWorkQueue().getPlantReportRequestList().add(pw);
                        enterprise.getWorkQueue().getPlantReportRequestList().add(pw);
                    }
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
        populatePlantReport();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void viewReportBtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewReportBtn1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = report2.getSelectedRow();
        if (selectedRow >= 0) {

            PlantReport a = (PlantReport) report2.getValueAt(selectedRow, 0);
            if (a.getStatus().equalsIgnoreCase("Unchecked") || a.getStatus().equalsIgnoreCase("Checking")) {
                JOptionPane.showMessageDialog(null, "No report available now!");
                return;
            }

            PlantReportRequest aRequest = new PlantReportRequest();
            aRequest.setReport(a);
            WritePlantReportJPanel vsjp = new WritePlantReportJPanel(CardPanel, aRequest);
            vsjp.setBackground(null);
            vsjp.setOpaque(false);
            CardPanel.add(" ViewPlantVitalsJPanel", vsjp);
            vsjp.populate();
            CardLayout layout = (CardLayout) CardPanel.getLayout();
            layout.next(CardPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
    }//GEN-LAST:event_viewReportBtn1ActionPerformed

    private void resetAllBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetAllBtnActionPerformed
        // TODO add your handling code here:
        reports = new ReportDirectory();
        reports.ReportList(enterprise.getAnimalDirectory());

        for (UserAccount ua : enterprise.getOrganizationDirectory().getOrganizationList().get(1).getUserAccountDirectory().getUserAccountList()) {
            while (ua.getWorkQueue().getAnimalReportRequestList().size() != 0) {
                ua.getWorkQueue().getAnimalReportRequestList().remove(0);
            }
        }

        while (enterprise.getWorkQueue().getAnimalReportRequestList().size() != 0) {
            enterprise.getWorkQueue().getAnimalReportRequestList().remove(0);
        }
        enterprise.setReportDirectory(reports);

        populateAnimalReport();
    }//GEN-LAST:event_resetAllBtnActionPerformed

    private void viewReportBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewReportBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = report1.getSelectedRow();
        if (selectedRow >= 0) {

            AnimalReport a = (AnimalReport) report1.getValueAt(selectedRow, 0);
            if (a.getStatus().equalsIgnoreCase("Unchecked") || a.getStatus().equalsIgnoreCase("Checking")) {
                JOptionPane.showMessageDialog(null, "No report available now!");
                return;
            }

            ViewVitalSignsJPanel vsjp = new ViewVitalSignsJPanel(CardPanel, a);
            vsjp.setBackground(null);
            vsjp.setOpaque(false);
            CardPanel.add(" VitalSignsJPanel", vsjp);
            CardLayout layout = (CardLayout) CardPanel.getLayout();
            layout.next(CardPanel);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
    }//GEN-LAST:event_viewReportBtnActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        int selectedRow = report1.getSelectedRow();
        if (selectedRow >= 0) {

            AnimalReport a = (AnimalReport) report1.getValueAt(selectedRow, 0);
            if (!a.getStatus().equalsIgnoreCase("Unchecked")) {
                JOptionPane.showMessageDialog(null, "This one is checked");
            } else {
                JComboBox<Person> combo = new JComboBox<>();
                List<Person> vetList = new ArrayList<>();
                for (UserAccount u : enterprise.getOrganizationDirectory().getOrganizationList().get(1).getUserAccountDirectory().getUserAccountList()) {
                    String tag = u.getPerson().getTag();
                    //            System.out.println(tag);
                    if (tag.equalsIgnoreCase("Vet")) {
                        vetList.add(u.getPerson());
                    }
                }

                for (Person p : vetList) {
                    combo.addItem(p);
                }

                JOptionPane.showMessageDialog(null, combo, "Select a vet", JOptionPane.QUESTION_MESSAGE);
                Person item = (Person) combo.getSelectedItem();
                for (UserAccount u : enterprise.getOrganizationDirectory().getOrganizationList().get(1).getUserAccountDirectory().getUserAccountList()) {
                    if (u.getPerson() == item) {
                        AnimalReportRequest pw = new AnimalReportRequest();
                        a.setStatus("Checking");
                        a.setResearcher(u.getPerson().getName());
                        pw.setReport(a);
                        pw.setMessage(a.getName());
                        u.getWorkQueue().getAnimalReportRequestList().add(pw);
                        enterprise.getWorkQueue().getAnimalReportRequestList().add(pw);
                    }
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row!");
        }
        populateAnimalReport();

    }//GEN-LAST:event_jButton7ActionPerformed

    private void alertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alertBtnActionPerformed
        // TODO add your handling code here:        
        boolean b = false;
        ArrayList<UserAccount> arr = new ArrayList<>();
        for (UserAccount acc : enterprise.getOrganizationDirectory().getOrganizationList().get(1).getUserAccountDirectory().getUserAccountList()) {
            if (acc.getPerson().getTag().equalsIgnoreCase("fieldgroup")) {
                arr.add(acc);
            }
        }
        for (PlantReportRequest ar : enterprise.getWorkQueue().getAbnormalPlantsRequest().getPlantReportRequests()) {
            if (ar.getStatus() == null) {
                b = true;
                break;
            }
        }
        for (AnimalReportRequest ar : enterprise.getWorkQueue().getAbnormalAnimalsRequest().getAnimalReportRequests()) {
            if (ar.getStatus() == null) {
                b = true;
            }
        }
        if (!b) {
            JOptionPane.showMessageDialog(null, "Nothing new to alert!");
            return;
        }
        boolean c = false;
        for (UserAccount a : arr) {
            if (a.getWorkQueue().getAbnormalAnimalsRequest().getAnimalReportRequests().size() == 0 && a.getWorkQueue().getAbnormalPlantsRequest().getPlantReportRequests().size() == 0 && a.getWorkQueue().getEmergencyRequest().size() == 0) {
                c = true;
            }
        }
        if (!c) {
            JOptionPane.showMessageDialog(null, "All field groups are occupied!");
            return;
        }
        for (UserAccount a : arr) {
            if (a.getWorkQueue().getAbnormalAnimalsRequest().getAnimalReportRequests().size() == 0 && a.getWorkQueue().getAbnormalPlantsRequest().getPlantReportRequests().size() == 0 && a.getWorkQueue().getEmergencyRequest().size() == 0) {
                for (PlantReportRequest ar : enterprise.getWorkQueue().getAbnormalPlantsRequest().getPlantReportRequests()) {
                    if (ar.getStatus() == null) {
                        a.getWorkQueue().getAbnormalPlantsRequest().getPlantReportRequests().add(ar);
                        ar.setStatus("Solving");
                    }
                }
            }
        }
        for (UserAccount a : arr) {
            if (a.getWorkQueue().getAbnormalAnimalsRequest().getAnimalReportRequests().size() == 0 && a.getWorkQueue().getAbnormalPlantsRequest().getPlantReportRequests().size() == 0 && a.getWorkQueue().getEmergencyRequest().size() == 0) {
                for (AnimalReportRequest ar : enterprise.getWorkQueue().getAbnormalAnimalsRequest().getAnimalReportRequests()) {
                    if (ar.getStatus() == null) {
                        a.getWorkQueue().getAbnormalAnimalsRequest().getAnimalReportRequests().add(ar);
                        ar.setStatus("Solving");
                    }
                }
            }
        }
        JOptionPane.showMessageDialog(null, "Field team alerted!");
        populateAnimalsInDangerTable();
        populatePlantsInDangerTable();

    }//GEN-LAST:event_alertBtnActionPerformed

    private void deleteAnimalSpeciesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAnimalSpeciesBtnActionPerformed
        // TODO add your handling code here:
        int selectedrow = animals.getSelectedRow();
        if (selectedrow >= 0) {
            AnimalSpecies a = (AnimalSpecies) animals.getValueAt(selectedrow, 0);
            for (AnimalSpecies aa : enterprise.getAnimalDirectory().getAnimalList()) {
                if (aa.getName() == a.getName()) {
                    while (enterprise.getReportDirectory().getReportDirectory().size() != 0) {
                        enterprise.getReportDirectory().getReportDirectory().remove(0);
                    }
                }
            }
            enterprise.getAnimalDirectory().getAnimalList().remove(a);

            populateAnimal();
            populateAnimalReport();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
    }//GEN-LAST:event_deleteAnimalSpeciesBtnActionPerformed

    private void deletePlantSpeciesBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deletePlantSpeciesBtnActionPerformed
        // TODO add your handling code here:
        int selectedrow = plants.getSelectedRow();
        if (selectedrow >= 0) {
            PlantSpecies a = (PlantSpecies) plants.getValueAt(selectedrow, 0);
            for (PlantSpecies aa : enterprise.getPlantDirectory().getPlantDir()) {
                if (aa.getName() == a.getName()) {
                    while (enterprise.getReportDirectory().getReportDirectory1().size() != 0) {
                        enterprise.getReportDirectory().getReportDirectory1().remove(0);
                    }
                }
            }
            enterprise.getPlantDirectory().getPlantDir().remove(a);

            populatePlant();
            populatePlantReport();
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row");
        }
    }//GEN-LAST:event_deletePlantSpeciesBtnActionPerformed

    private void jButton16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton16ActionPerformed
        // TODO add your handling code here:
        CardPanel.remove(this);
        CardLayout layout = (CardLayout) CardPanel.getLayout();
        layout.previous(CardPanel);
    }//GEN-LAST:event_jButton16ActionPerformed

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        // TODO add your handling code here:
        CardPanel.remove(this);
        CardLayout layout = (CardLayout) CardPanel.getLayout();
        layout.previous(CardPanel);
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        // TODO add your handling code here:
        CardPanel.remove(this);
        CardLayout layout = (CardLayout) CardPanel.getLayout();
        layout.previous(CardPanel);
    }//GEN-LAST:event_jButton18ActionPerformed

    public void populateAnimal() {
        DefaultTableModel dtm = (DefaultTableModel) animals.getModel();
        dtm.setRowCount(0);
        for (AnimalSpecies a : enterprise.getAnimalDirectory().getAnimalList()) {
            Object[] row = new Object[12];
            row[0] = a;
            row[1] = a.getName();
            row[2] = a.getQuantity();
            row[3] = a.getGenus();
            row[4] = a.getMin_bloodPressure();
            row[5] = a.getMax_bloodPressure();
            row[6] = a.getMin_temperature();
            row[7] = a.getMax_temperature();
            row[8] = a.getMin_weight();
            row[9] = a.getMax_weight();
            row[10] = a.getMin_height();
            row[11] = a.getMax_height();
            dtm.addRow(row);

        }
    }

    public void populatePlant() {
        DefaultTableModel dtm = (DefaultTableModel) plants.getModel();
        dtm.setRowCount(0);
        for (PlantSpecies p : enterprise.getPlantDirectory().getPlantDir()) {
            Object[] row = new Object[6];
            row[0] = p;
            row[1] = p.getName();
            row[2] = p.getQuantity();
            row[3] = p.getGenus();
            row[4] = p.getMin_temperate();
            row[5] = p.getMax_temperate();
            dtm.addRow(row);

        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AbnormalPanel;
    private javax.swing.JButton Approve;
    private javax.swing.JButton Assign;
    private javax.swing.JButton Decline;
    private javax.swing.JPanel Report;
    private javax.swing.JPanel SpeciesPanel;
    private javax.swing.JButton alertBtn;
    private javax.swing.JTable animalInDangerTable;
    private javax.swing.JTable animals;
    private javax.swing.JButton deleteAnimalSpeciesBtn;
    private javax.swing.JButton deletePlantSpeciesBtn;
    private javax.swing.JTable em;
    private javax.swing.JTextField h;
    private javax.swing.JLabel highestLabel;
    private javax.swing.JLabel humidityLabel;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField max;
    private javax.swing.JTextField min;
    private javax.swing.JTable plantInDangerTable;
    private javax.swing.JTable plants;
    private javax.swing.JTable project;
    private javax.swing.JTable report1;
    private javax.swing.JTable report2;
    private javax.swing.JTable reservation;
    private javax.swing.JButton resetAllBtn;
    private javax.swing.JButton resetAllPlantBtn;
    private javax.swing.JButton viewAnimalBtn;
    private javax.swing.JButton viewPlantBtn;
    private javax.swing.JButton viewReportBtn;
    private javax.swing.JButton viewReportBtn1;
    // End of variables declaration//GEN-END:variables

    public void populateReservation() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        DefaultTableModel model = (DefaultTableModel) reservation.getModel();
        model.setRowCount(0);
        for (ReservationWorkRequest request : enterprise.getOrganizationDirectory().getOrganizationList().get(0).getWorkQueue().getReservationWorkRequests()) {
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getSender().getUsername();
            row[2] = String.valueOf(sdf.format(request.getRequestDate()));
            row[3] = request.getMessage();
            row[4] = request.getStatus();
            model.addRow(row);
        }

    }

    public void populateProject() {
        DefaultTableModel model = (DefaultTableModel) project.getModel();
        model.setRowCount(0);
        for (Project p : enterprise.getProjectDirectory().getProjectDir()) {
            Object[] row = new Object[6];
            row[0] = p;
            row[1] = p.getId();
            row[2] = p.getMemberNum();
            if (p.getResearcher() == "") {
                row[3] = "pending";
            } else {
                row[3] = p.getResearcher();
            }
            row[4] = p.getStatus();
            row[5] = p.getDescription();
            model.addRow(row);
        }
    }

    public void populateAnimalReport() {
        DefaultTableModel dtm = (DefaultTableModel) report1.getModel();
        dtm.setRowCount(0);
        ReportDirectory rd = enterprise.getReportDirectory();
        rd.ReportList(enterprise.getAnimalDirectory());
        for (AnimalReport r : rd.getReportDirectory()) {
            Object[] row = new Object[3];
            row[0] = r;
            row[1] = r.getStatus();
            row[2] = r.getResearcher();
            dtm.addRow(row);
        }
    }

    public void populatePlantReport() {
        DefaultTableModel dtm = (DefaultTableModel) report2.getModel();
        dtm.setRowCount(0);
        ReportDirectory rd = enterprise.getReportDirectory();
        rd.ReportList1(enterprise.getPlantDirectory());
        for (PlantReport r : rd.getReportDirectory1()) {
            Object[] row = new Object[3];
            row[0] = r;
            row[1] = r.getStatus();
            row[2] = r.getResearcher();
            dtm.addRow(row);
        }
    }

    public void populateAnimalsInDangerTable() {
        DefaultTableModel dtm = (DefaultTableModel) animalInDangerTable.getModel();
        dtm.setRowCount(0);
        for (AnimalReportRequest arr : enterprise.getWorkQueue().getAnimalReportRequestList()) {
            if (arr.getReport().getStatus().equalsIgnoreCase("checked")) {
                for (AnimalSpecies as : enterprise.getAnimalDirectory().getAnimalList()) {
                    for (int i = 0; i < as.getAnimalIndividualDir().getAnimalList().size(); i++) {
                        if (arr.getReport().getName() == as.getAnimalIndividualDir().getAnimalList().get(i).getName() || arr.getReport().getName().equalsIgnoreCase(as.getAnimalIndividualDir().getAnimalList().get(i).getName())) {
                            if (arr.getReport().getMax_bp() > as.getMax_bloodPressure() || arr.getReport().getMin_bp() < as.getMin_bloodPressure()) {
                                enterprise.getWorkQueue().getAbnormalAnimalsRequest().getAnimalReportRequests().add(arr);
                                Object[] row = new Object[2];
                                row[0] = arr;
                                if (arr.getStatus() == null) {
                                    row[1] = "Unchecked";
                                } else {
                                    row[1] = arr.getStatus();
                                }
                                dtm.addRow(row);
                            }
                        }
                    }

                }
            }
        }
    }

    public void populatePlantsInDangerTable() {
        if (enterprise.getWorkQueue().getClimateReportRequests().size() == 0) {
            return;
        }
        DefaultTableModel dtm = (DefaultTableModel) plantInDangerTable.getModel();
        dtm.setRowCount(0);
        if (enterprise.getWorkQueue().getAbnormalPlantsRequest().getPlantReportRequests().size() != 0) {
            for (PlantReportRequest aaa : enterprise.getWorkQueue().getAbnormalPlantsRequest().getPlantReportRequests()) {
                Object[] row = new Object[2];
                row[0] = aaa;
                if (aaa.getStatus() == null) {
                    row[1] = "Unchecked";
                } else {
                    row[1] = aaa.getStatus();
                }
                dtm.addRow(row);
            }
        } else {
            for (PlantSpecies as : enterprise.getPlantDirectory().getPlantDir()) {
                if (enterprise.getWorkQueue().getClimateReportRequests().get(0).getReport().getMax_t() > as.getMax_temperate() || enterprise.getWorkQueue().getClimateReportRequests().get(0).getReport().getMin_t() < as.getMin_temperate()) {
                    PlantReportRequest arr = new PlantReportRequest();
                    arr.getReport().setName(as.getName());
                    enterprise.getWorkQueue().getAbnormalPlantsRequest().getPlantReportRequests().add(arr);
                    Object[] row = new Object[2];
                    row[0] = arr;
                    row[1] = "Unchecked";
                    dtm.addRow(row);
                }
            }
        }
    }

    public void populateEmergency() {
        DefaultTableModel dtm = (DefaultTableModel) em.getModel();
        dtm.setRowCount(0);
        for (EmergencyRequest e : enterprise.getWorkQueue().getEmergencyRequest()) {
            Object[] row = new Object[4];
            row[0] = e;
            row[1] = e.getDescription();
            row[2] = e.getMessage();
            row[3] = e.getStatus();
            dtm.addRow(row);
        }
    }

}
